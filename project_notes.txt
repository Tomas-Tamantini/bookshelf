Project decisions:
    - Test-Driven-Development - Excellent test coverage
    - Including github actions from the start
    - Having separate models for the API DTO's, Database DTO's, and domain models (was it a good idea to have the domain folder? It's awfully empty)
    - Using the repository pattern
    - Not using a Unit of work pattern
    - Explicitely query database to check for conflicts, rather than raising errors (avoid using errors for control, but break the ask-dont-tell principle)
    - Leaving the DB for last (developing with just in-memory implementation of the repositories)
    - Using both an access token (short-lived) and a refresh token (long-lived)


    - A LOT of dependency injection (Authentication, authorization, repositories, etc.), making most tests very fast
    - Explicitely marking the integration and end-to-end tests. End-to-end tests only test the happy paths
    - Grouping the query parameters into one pydantic object, rather than using fastapi's Query object. Example:

        
            @authors_router.get("/", status_code=HTTPStatus.OK, response_model=GetAuthorsResponse)
            def get_authors(
                author_repository: T_AuthorRepository,
                query_parameters: GetAuthorsQueryParameters = Depends(),
            )

            instead of:

            @authors_router.get("/", status_code=HTTPStatus.OK, response_model=GetAuthorsResponse)
            def get_authors(
                author_repository: T_AuthorRepository,
                offset: int = Query(None),
                limit: int = Query(None),
                name: str = Query(None),
            )


    11/Jul/2024: Decided to revert the decision of checking for conflict in the API layer, and delegate it to repository layer, getting rid of methods like "name_exists", "email_exists", etc. Now the repository raises an error
    12/Jul/2024: Extracted most of the functionalities of the in-memory repositories to a base class. Collapsed all repository protocols into one using generic types
    24/Jul/2024: Dockerize even before connecting to a relational database (so just the Dockerfile is needed, not docker compose)
    26/Jul/2024: Implement authorization using dependency injection
    08/Ago/2024: Implement relational database, still with SQLite
    10/Ago/2024: Implement docker compose with PostgreSQL. Also use PostgreSQL in integration/end-to-end tests with TestContainers

    TODO:
        - Implement suggested test cases (https://fastapidozero.dunossauro.com/14/#cenarios-de-teste)
        - Mutation tests
        - Clean up end to end tests
        - Create frontend
        - Deploy